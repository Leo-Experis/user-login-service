openapi: 3.0.3
info:
  title: Authentication API
  description: API for A Hotel booking service
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Main production server

tags:
  - name: Authentication
    description: Operations related to user authentication
  - name: Bookers
    description: Operations related to bookers
  - name: Bookings
    description: Operations for booking management
  - name: Rooms
    description: Operations for retrieving room information
  - name: Notifications
    description: Operations for retrieving notification information
  - name: Breakfasts
    description: Operations for breakfast information

paths:
  /auth/signin:
    post:
      operationId: loginUser
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and return an access token if credentials are valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "username"
                  description: "User's username"
                password:
                  type: string
                  format: password
                  example: "user_password"
                  description: "User's password"
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        token:
                          type: string
                          description: "JWT access token"
                          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        type:
                          type: string
                          description: "Type of token"
                          example: "Bearer"
                        id:
                          type: integer
                          description: The ID of the user
                          example: 1
                        username:
                          type: string
                          description: The username of the user
                          example: max
                        roles:
                          type: array
                          items:
                            type: string
                            description: "USER ROLE"
                            example: "ROLE_ADMIN"
        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username or password"
        '401':
          description: Unauthorized, wrong credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred"
  /auth/signup:
    post:
      operationId: signupUser
      tags:
        - Authentication
      summary: User sign up
      description: Create a new user in the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "username"
                  description: "User's username"
                password:
                  type: string
                  format: password
                  example: "user_password"
                  description: "User's password"
                role:
                  type: array
                  items:
                    type: string
                    description: "User role"
                    example: "admin"
              required:
                - username
                - password
                - role
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Username is already taken"
        '401':
          description: Unauthorized, wrong credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred"
  /users:
    get:
      operationId: getUsers
      tags:
        - Authentication
      summary: Get list of users
      description: Retrieve a list of all users in the application. Authentication is required.
      security:
        - BearerAuth: [ ]  # Using Bearer token for authentication
      responses:
        '200':
          description: Successfully retrieved list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "User's unique ID"
                          example: 1
                        username:
                          type: string
                          description: "User's username"
                          example: "max"
                        password:
                          type: string
                          description: "User's hashed password"
                          example: "$2a$10$SXNu9JDDMhsMsVW3PlGTQON/hh.KHJZcdRH1whwpTppfn0QwTVan6"
                        roles:
                          type: array
                          description: "List of roles assigned to the user"
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                description: "Role ID"
                                example: 2
                              name:
                                type: string
                                description: "Role name"
                                example: "ROLE_ADMIN"
        '401':
          description: Unauthorized, missing or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred"

  /users/{id}:
    get:
      operationId: Get a user by id
      tags:
        - Authentication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      summary: Get one user by id
      description: Get one user by id
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "User's unique ID"
                        example: 1
                      username:
                        type: string
                        description: "User's username"
                        example: "max"
                      password:
                        type: string
                        description: "User's hashed password"
                        example: "$2a$10$SXNu9JDDMhsMsVW3PlGTQON/hh.KHJZcdRH1whwpTppfn0QwTVan6"
                      roles:
                        type: array
                        description: "List of roles assigned to the user"
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: "Role ID"
                              example: 2
                            name:
                              type: string
                              description: "Role name"
                              example: "ROLE_ADMIN"
        '401':
          description: Unauthorized, missing or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized access"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred"

  /bookers:
    get:
      operationId: getBookers
      tags:
        - Bookers
      summary: Retrieve list of bookers
      description: Get a list of bookers along with their booking details.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: search
          in: query
          required: false
          description: (Optional) Get booker(s) by name or email. %20 denotes a space in the parameter.
          schema:
            type: string
            example: John%20Doe
      responses:
        '200':
          description: Successfully retrieved list of bookers
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookerForBookers'
        '400':
          description: Bad request, possibly due to invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request parameters"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred"

    post:
      operationId: createBookers
      tags:
        - Bookers
      summary: Create a booking from bookers
      description: Create a new booking with details including personal information and booking dates.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "Luwdig"
                lastName:
                  type: string
                  example: "gustavsson"
                email:
                  type: string
                  format: email
                  example: "Hello@email.com"
                phoneNumber:
                  type: string
                  example: "0741548154"
                address:
                  type: string
                  example: "bork"
                postalCode:
                  type: string
                  example: "4123"
                country:
                  type: string
                  example: "Sweden"
                city:
                  type: string
                  example: "Gothenburg"
                checkInDate:
                  type: string
                  format: date
                  example: "2025-11-22"
                checkOutDate:
                  type: string
                  format: date
                  example: "2025-11-26"
                bookersNote:
                  type: string
                  example: "Hello world notes 2"
                note:
                  type: string
                  example: "Hello world note"
                capacity:
                  type: integer
                  example: 2
                checkoutNotes:
                  type: string
                  example: "check out notes 2"
                bookingRemarks:
                  type: string
                  example: "booking remark 2"
                roomId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookingId:
                    type: integer
                    description: "Unique identifier for the booking"
                    example: 1234
                  message:
                    type: string
                    example: "Booking created successfully."
        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request; check that all parameters exist and are corretly formatted"
        '404':
          description: No room with the given id found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No room with the given id found"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /bookers/{id}:
    get:
      operationId: getOneBooker
      tags:
        - Bookers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      summary: Get one booker by id
      description: Get one booker by id
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/BookerForBookers'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"
    put:
      operationId: updateBookers
      tags:
        - Bookers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      summary: Update a booker
      description: Update an existing booker
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "Max"
                lastName:
                  type: string
                  example: "Olofsson"
                email:
                  type: string
                  format: email
                  example: "max.olofsson@example.com"
                phoneNumber:
                  type: string
                  example: "0741548935"
                address:
                  type: string
                  example: "Fabrikstorget 1"
                postalCode:
                  type: string
                  example: "41250"
                country:
                  type: string
                  example: "Sweden"
                city:
                  type: string
                  example: "Göteborg"

      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/BookerForBookers'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request, possibly due to missing or badly formatted fields"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /bookings:
    get:
      operationId: getBookings
      tags:
        - Bookings
      summary: Get all bookings
      description: Get all bookings in the database
      security:
        - BearerAuth: [ ]
      parameters:
        - name: onCheckInDate
          in: query
          required: false
          description: (Optional) Get all bookings that have the given check in date
          schema:
            type: string
            example: "2024-11-11"
        - name: onCheckOutDate
          in: query
          required: false
          description: (Optional) Get all bookings that have the given check out date
          schema:
            type: string
            example: "2024-11-11"
        - name: onDate
          in: query
          required: false
          description: (Optional) Get all bookings that have the given date as either check in date or check out date. This will cause this endpoint to return two lists of bookings - called checkIns and checkOuts.
          schema:
            type: string
            example: "2024-11-11"
        - name: status
          in: query
          required: false
          description: (Optional) Get all bookings that has the given status (BOOKED, ONGOING, FINISHED, CANCELED).
          schema:
            type: string
            example: "BOOKED"
        - name: search
          in: query
          required: false
          description: (Optional) Search by name (either full name, i.e. first name + last name, or just first name or last name) or booking ID.
            Spaces are to be replaced with %20. E.g. "John Doe" becomes "John%20Doe".
          schema:
            type: string
            example: "John%20Doe"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookingForBookings'
        '400':
          description: Bad request. Check that the parameter date is in the format yyyy-MM-dd.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Something went wrong; please check request parameters/body."
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred"

    post:
      operationId: createBooking
      tags:
        - Bookings
      summary: Create a booking (receptionist/admin)
      description: Creates a booking to an existing booker and room. Only receptionist and admin are authorized to access this endpoint.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookerId:
                  type: integer
                  example: 1
                roomId:
                  type: integer
                  example: 1
                checkInDate:
                  type: string
                  example: "2024-12-01"
                checkOutDate:
                  type: string
                  example: "2024-12-11"
                capacity:
                  type: integer
                  example: 3
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/BookingForBookings'
        '400':
          description: Bad request. Something in the request body is erroneous.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "error"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Booker with given bookerId or room with given roomId not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Room not found"


  /bookings/checkin/{id}:
    post:
      summary: Check in a booking/guest
      description: check in booking
      security:
        - BearerAuth: [ ]
      operationId: checkInBooking
      tags:
        - Bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successfully checked in
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/BookingForBookings'

        '400':
          description: Bad request, possibly due to booking is already checked in
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking already checked in"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking not found"

  /bookings/checkout/{id}:
    post:
      summary: Check out a booking/guest
      description: check out booking
      security:
        - BearerAuth: [ ]
      operationId: checkOutBooking
      tags:
        - Bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '400':
          description: Bad request, possibly due to booking is already checked out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking already checked out"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking not found"

  /bookings/{id}:
    get:
      operationId: getOneBooking
      tags:
        - Bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      summary: Get one booking by id
      description: Get one booking by id
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/BookingForBookings'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: string
                    example: "Internal server error"
    put:
      summary: Update an existing booking
      description: Update a booking
      security:
        - BearerAuth: [ ]
      operationId: updateBooking
      tags:
        - Bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookerId:
                  type: integer
                  example: 1
                roomId:
                  type: integer
                  example: 1
                checkInDate:
                  type: string
                  example: "2024-12-01"
                checkOutDate:
                  type: string
                  example: "2024-12-11"
                capacity:
                  type: integer
                  example: 3
                notes:
                  type: string
                  example: "(Optional) Note about the booking"
                checkOutNotes:
                  type: string
                  example: "(Optional) Notes about the check out"
                bookingRemarks:
                  type: string
                  example: "(Optional) Remarks about the booking"
                bookersNote:
                  type: string
                  example: "(Optional) Remarks about the booking"

      responses:
        '201':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/BookingForBookings'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request, capacity is required or must be greater than 0"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Given room id, booker id, or booking id could not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No room with the given id was found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"
    delete:
      summary: Delete an existing booking
      description: Deletes a booking
      security:
        - BearerAuth: [ ]
      operationId: deleteBooking
      tags:
        - Bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Booking deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: string
                    example: "Booking object here; to be implemented."
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Given room id could not be mapped to a room
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No room with the given id was found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /bookings/cancel/{id}:
    post:
      summary: Cancel an existing booking
      description: Cancels a booking
      security:
        - BearerAuth: [ ]
      operationId: cancelBooking
      tags:
        - Bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Booking canceled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/BookingForBookings'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Given room id could not be mapped to a room
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No room with the given id was found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /rooms:
    get:
      operationId: getRooms
      tags:
        - Rooms
      summary: Get all rooms
      description: Get details about rooms, including current bookings and booker details.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoomForRooms'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"
    post:
      operationId: addRoom
      tags:
        - Rooms
      summary: Add a new room
      description: Create a new room entry with details such as name, beds, capacity, and occupancy status.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Single
                capacity:
                  type: integer
                  example: 2
                beds:
                  type: integer
                  example: 1
                number:
                  type: integer
                  example: 101
                typeOfBeds:
                  type: array
                  items:
                    type: string
                  example: [ "single" ]
                typeOfRoom:
                  type: string
                  example: single
                description:
                  type: string
                  example: Nice room
                pricePerNight:
                  type: number
                  format: double
                  example: 50.0
                conveniences:
                  type: array
                  items:
                    type: string
                  example: [ "mini-bar" ]
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: Single
                      number:
                        type: integer
                        example: 101
                      capacity:
                        type: integer
                        example: 2
                      beds:
                        type: integer
                        example: 1
                      typeOfBeds:
                        type: array
                        items:
                          type: string
                        example: [ "single" ]
                      typeOfRoom:
                        type: string
                        example: single
                      description:
                        type: string
                        example: Nice room
                      pricePerNight:
                        type: number
                        format: double
                        example: 50.0
                      conveniences:
                        type: array
                        items:
                          type: string
                        example: [ "mini-bar" ]
                      bookings:
                        type: array
                        items:
                          type: object
                        example: [ ]
        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: string
                    example: "Bad request, capacity is required or must be greater than 0"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: string
                    example: "An internal server error occurred"
  /rooms/available:
    post:
      operationId: checkRoomAvailability
      tags:
        - Rooms
      summary: Check room availability
      description: Check if there are available rooms that match the specified capacity and date range.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                capacity:
                  type: integer
                  description: "Required capacity for the room"
                  example: 2
                checkInDate:
                  type: string
                  format: date
                  description: "Desired check-in date"
                  example: "2025-11-21"
                checkOutDate:
                  type: string
                  format: date
                  description: "Desired check-out date"
                  example: "2025-11-23"
              required:
                - capacity
                - checkInDate
                - checkOutDate
      responses:
        '200':
          description: Successfully retrieved list of available rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookingForBookings'
        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: string
                    example: "Bad request, capacity is required or must be greater than 0"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An internal server error occurred"
  /rooms/{id}:
    put:
      summary: Update an existing room
      description: Update a room
      security:
        - BearerAuth: [ ]
      operationId: updateRoom
      tags:
        - Rooms
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Single
                capacity:
                  type: integer
                  example: 2
                beds:
                  type: integer
                  example: 1
                number:
                  type: integer
                  example: 101
                typeOfBeds:
                  type: array
                  items:
                    type: string
                  example: [ "single" ]
                typeOfRoom:
                  type: string
                  example: single
                description:
                  type: string
                  example: Nice room
                pricePerNight:
                  type: number
                  format: double
                  example: 50.0
                conveniences:
                  type: array
                  items:
                    type: string
                  example: [ "mini-bar", "pool" ]
      responses:
        '201':
          description: Room updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: Single
                      number:
                        type: integer
                        example: 101
                      capacity:
                        type: integer
                        example: 2
                      beds:
                        type: integer
                        example: 1
                      typeOfBeds:
                        type: array
                        items:
                          type: string
                        example: [ "single" ]
                      typeOfRoom:
                        type: string
                        example: single
                      description:
                        type: string
                        example: Nice room
                      pricePerNight:
                        type: number
                        format: double
                        example: 50.0
                      conveniences:
                        type: array
                        items:
                          type: string
                        example: [ "mini-bar", "pool" ]
                      bookings:
                        type: array
                        items:
                          type: object
                        example: [ ]
        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request, capacity is required or must be greater than 0"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Given room id could not be mapped to a room
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No room with the given id was found"

  /notifications:
    get:
      operationId: getNotifications
      tags:
        - Notifications
      summary: Get all notifications
      description: Get details about notifications
      security:
        - BearerAuth: [ ]
      parameters:
        - name: onStartDate
          in: query
          required: false
          description: (Optional) Get all notifications that has startsAt on the given date. Here, time of day does not matter, just the day of the date.
          schema:
            type: string
            example: "2024-11-11"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        createdAt:
                          type: string
                          example: "2024-11-11"
                        updatedAt:
                          type: string
                          example: "2024-11-11"
                        startsAt:
                          type: string
                          example: "2024-11-11 07:30"
                        expiresAt:
                          type: string
                          example: "2024-11-11 14:15"
                        message:
                          type: string
                          example: "Notice for all employees"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"
    post:
      operationId: addNotifications
      tags:
        - Notifications
      summary: Add a new notifications
      description: Create a new notification
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startsAt:
                  type: string
                  example: "2024-11-11 07:30"
                expiresAt:
                  type: string
                  example: "2024-11-11 14:15"
                message:
                  type: string
                  example: "Notice for all employees"

      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      createdAt:
                        type: string
                        example: "2024-11-11"
                      updatedAt:
                        type: string
                        example: "2024-11-11"
                      startsAt:
                        type: string
                        example: "2024-11-11 07:30"
                      expiresAt:
                        type: string
                        example: "2024-11-11 14:15"
                      message:
                        type: string
                        example: "Notice for all employees"


        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"
  /notifications/{id}:
    get:
      operationId: getOneNotification
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      summary: Get one notifications
      description: Get details about one notification
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      createdAt:
                        type: string
                        example: "2024-11-11"
                      updatedAt:
                        type: string
                        example: "2024-11-11"
                      startsAt:
                        type: string
                        example: "2024-11-11 07:30"
                      expiresAt:
                        type: string
                        example: "2024-11-11 14:15"
                      message:
                        type: string
                        example: "Notice for all employees"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"
    put:
      summary: Update an existing notification
      description: Update a room
      security:
        - BearerAuth: [ ]
      operationId: updateNotification
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startsAt:
                  type: string
                  example: "2024-11-11 07:30"
                expiresAt:
                  type: string
                  example: "2024-11-11 14:15"
                message:
                  type: string
                  example: "Notice for all employees"
      responses:
        '201':
          description: Notification updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      createdAt:
                        type: string
                        example: "2024-11-11"
                      updatedAt:
                        type: string
                        example: "2024-11-11"
                      startsAt:
                        type: string
                        example: "2024-11-11 07:30"
                      expiresAt:
                        type: string
                        example: "2024-11-11 14:15"
                      message:
                        type: string
                        example: "Notice for all employees"
        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Given room id could not be mapped to a room
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No notification with the given id was found"

    delete:
      operationId: deleteNotification
      tags:
        - Notifications
      summary: Delete an existing notification
      description: Deletes the given notification
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    properties:
                      id:
                        type: integer
                        example: 1
                      createdAt:
                        type: string
                        example: "2024-11-11"
                      updatedAt:
                        type: string
                        example: "2024-11-11"
                      startsAt:
                        type: string
                        example: "2024-11-11 07:30"
                      expiresAt:
                        type: string
                        example: "2024-11-11 14:15"
                      message:
                        type: string
                        example: "Notice for all employees"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: No notification with the given id found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No notification with the given id found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /chatgroup:
    get:
      operationId: get Chatgroups
      tags:
        - ChatGroup
      summary: Get all existing chatgroups
      description: Get all existing chatgroups
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatgroupForChatgroups'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

    post:
      operationId: create new Chatgroup
      tags:
        - ChatGroup
      summary: Create a new Chatgroup
      description: Create a new Chatgroup
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatgroupDTOForChatgroups'

      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatgroupForChatgroups'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Chatgroup not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Chatgroup with the given ID not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"

  /chatgroup/{id}:
    get:
      operationId: Get a chatgroup by id
      tags:
        - ChatGroup
      parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              example: 1
      summary: Get a chatgroup by id
      description: Get a chatgroup by id
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatgroupForChatgroups'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

    delete:
      operationId: deleteChatgroup
      tags:
        - ChatGroup
      summary: Delete an existing chatgroup
      description: Deletes the given chatgroup
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatgroupForChatgroups'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: No chatgroup with the given id found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No chatgroup with the given id found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /chatgroup/user/{userId}:
    get:
      operationId: Get all chatgroups a user is present in
      tags:
        - ChatGroup
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      summary: Get all chatgroups a user is present in
      description: Get all chatgroups a user is present in
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatgroupForChatgroups'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /chatgroup/{chatId}/addUser/{userId}:
    post:
      operationId: Add existing user to existing chatgroup
      tags:
        - ChatGroup
      summary: Add existing user to existing chatgroup
      description: Add existing user to existing chatgroup
      security:
        - BearerAuth: [ ]
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1

      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatgroupForChatgroups'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Chatgroup or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Chatgroup or user with the given IDs not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"

  /chatgroup/{chatId}/removeUser/{userId}:
    delete:
      operationId: Remove existing user to existing chatgroup
      tags:
        - ChatGroup
      summary: Remove existing user from existing chatgroup
      description: Remove existing user from existing chatgroup
      security:
        - BearerAuth: [ ]
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1

      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatgroupForChatgroups'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Chatgroup or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Chatgroup or user with the given IDs not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"

  /chatgroup/{chatId}/addMessage:
    post:
      operationId: Add message to existing chatgroup
      tags:
        - ChatGroup
      summary: Add message to existing chatgroup
      description: Add message to existing chatgroup
      security:
        - BearerAuth: [ ]
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageForChatgroups'

      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatgroupForChatgroups'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Chatgroup or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Chatgroup or user with the given IDs not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"

  /chatgroup/removeMessage/{messageId}:
    delete:
      operationId: Remove a message from an existing chatgroup
      tags:
        - ChatGroup
      summary: Remove a message from an existing chatgroup
      description: Remove a message from an existing chatgroup
      security:
        - BearerAuth: [ ]
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
            example: 1


      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatgroupForChatgroups'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Chatgroup or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Chatgroup or user with the given IDs not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"

  /messages/{id}:
    get:
      operationId: Get a message by id
      tags:
        - Messages
      summary: Get a message by id
      description: Get a message by id
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1

      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesForMessages'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Message with the given IDs not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"

    put:
      operationId: Update a message's content
      tags:
        - Messages
      summary: Update a message's content
      description: Update a message's content
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagesDTOMessages'

      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesForMessages'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Chatgroup not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Message with the given ID not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"




  /breakfasts:
    get:
      operationId: getBreakfasts
      tags:
        - Breakfasts
      summary: Get all breakfasts
      description: Get all breakfasts
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BreakfastForBreakfasts'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"

  /breakfasts/{id}:
    get:
      operationId: getOneBreakfast
      tags:
        - Breakfasts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      summary: Get one breakfast
      description: Get details about one breakfast
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakfastForBreakfasts'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Breakfast not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Breakfast with the given ID not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"
    put:
      summary: Update an existing breakfast
      description: Update a breakfast
      security:
        - BearerAuth: [ ]
      operationId: updateBreakfast
      tags:
        - Breakfasts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreakfastDTOForBreakfasts'
      responses:
        '201':
          description: Notification updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/BreakfastForBreakfasts'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Breakfast not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Breakfast with the given ID not found"

    delete:
      operationId: deleteBreakfast
      tags:
        - Breakfasts
      summary: Delete an existing breakfast
      description: Deletes the given breakfast
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakfastForBreakfasts'
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: No notification with the given id found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "No notification with the given id found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Internal server error"
  /breakfasts/addBreakfast/{bookingId}:
    post:
      operationId: addBreakfast
      tags:
        - Breakfasts
      summary: Add a new breakfast to a booking
      description: Create a new breakfast
      security:
        - BearerAuth: [ ]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreakfastDTOForBreakfasts'


      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakfastForBreakfasts'

        '400':
          description: Bad request, possibly due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Bad request"
        '403':
          description: Missing authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Booking with the given ID not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "An internal server error occurred"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Indicating JWT token is expected





  schemas:

    # For /bookings
    RoomForBookings:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Suit Deluxe"
        number:
          type: integer
          example: 201
        capacity:
          type: integer
          example: 4
        beds:
          type: integer
          example: 1
        typeOfBeds:
          type: array
          items:
            example: queen sized
        typeOfRoom:
          type: string
          example: single
        description:
          type: string
          example: "Amazing Suit! The hotel's most luxurious!"
        pricePerNight:
          type: integer
          example: 1002
        conveniences:
          type: array
          items:
            example: jacuzzi

    BookerForBookings:
      type: object
      properties:
        id:
          type: integer
          example: 1

    BookingForBookings:
      type: object
      properties:
        id:
          type: integer
          example: 1
        bookingDate:
          type: string
          example: "2024-11-12T12:39:03.139+00:00"
        checkInDate:
          type: string
          example: "2024-11-12"
        checkOutDate:
          type: string
          example: "2024-11-12"
        notes:
          type: string
          example: "Notes about something"
        capacity:
          type: integer
          example: 2
        totalPrice:
          type: number
          example: 55.4
        isCheckout:
          type: boolean
          example: false
        isCheckin:
          type: boolean
          example: false
        checkoutNotes:
          type: string
          example: "Call a taxi before checkout"
        bookingRemarks:
          type: string
          example: "Remark about the booking"
        bookersNote:
          type: string
          example: "note from the booker"
        booker:
          $ref: '#/components/schemas/BookerForBookings'
        room:
          $ref: '#/components/schemas/RoomForBookings'
        status:
          type: string
          example: "BOOKED"

    # Room
    RoomForRooms:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            id:
              type: integer
              example: 2
            name:
              type: string
              example: Single
            number:
              type: integer
              example: 101
            capacity:
              type: integer
              example: 2
            beds:
              type: integer
              example: 1
            typeOfBeds:
              type: array
              items:
                type: string
              example: [ "single" ]
            typeOfRoom:
              type: string
              example: single
            description:
              type: string
              example: Nice room
            pricePerNight:
              type: number
              format: double
              example: 50.0
            conveniences:
              type: array
              items:
                type: string
              example: [ "mini-bar" ]
            bookings:
              type: array
              items:
                type: object
              example: [ ]

    # Booker
    BookingForBookers:
      type: object
      properties:
        id:
          type: integer
          example: 1
        bookingDate:
          type: string
          example: "2024-11-12T12:39:03.139+00:00"
        checkInDate:
          type: string
          example: "2024-11-12"
        checkOutDate:
          type: string
          example: "2024-11-12"
        notes:
          type: string
          example: "Notes about something"
        capacity:
          type: integer
          example: 2
        totalPrice:
          type: number
          example: 55.4
        isCheckout:
          type: boolean
          example: false
        isCheckin:
          type: boolean
          example: false
        checkoutNotes:
          type: string
          example: "Call a taxi before checkout"
        bookingRemarks:
          type: string
          example: "Remark about the booking"
        bookersNote:
          type: string
          example: "note from the booker"
        room:
          $ref: '#/components/schemas/RoomForBookings'
        status:
          type: string
          example: "BOOKED"

    BookerForBookers:
      type: object
      properties:
        id:
          type: integer
          example: 2
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: Olofsson
        email:
          type: string
          example: max.olofsson@example.com
        phoneNumber:
          type: string
          example: "112"
        address:
          type: string
          example: "Fabrikstorget 1"
        postalCode:
          type: string
          example: "41250"
        country:
          type: string
          example: "Sweden"
        city:
          type: string
          example: "Göteborg"
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/BookingForBookers'


    # For /breakfasts
    BreakfastForBreakfasts:
      type: object
      properties:
        id:
          type: integer
          example: 1
        bookingId:
          type: integer
          example: 1
        numberOfBreakfasts:
          type: integer
          example: 4
        allergies:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: lactose
              quantity:
                type: integer
                example: 2
        specialities:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: vegan
              quantity:
                type: integer
                example: 2
        totalPrice:
          type: integer
          example: 500

    BreakfastDTOForBreakfasts:
      type: object
      properties:
        numberOfBreakfasts:
          type: integer
          example: 4
        allergies:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: lactose
              quantity:
                type: integer
                example: 2
        specialities:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: vegan
              quantity:
                type: integer
                example: 2

    # For chatgroups
    ChatgroupForChatgroups:
      type: object
      properties:
        id:
          type: integer
          example: 1
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              username:
                type: string
                example: "Ludwig"
        groupName:
          type: string
          example: "The Janitors!"

    ChatgroupDTOForChatgroups:
      type: object
      properties:
        groupName:
          type: string
          example: The Janitors!

    # Message for chatgroups
    MessageForChatgroups:
      type: object
      properties:
        content:
          type: string
          example: "I have a lot to do today!"
        userId:
          type: integer
          example: 1


    #For Messages send
    MessagesDTOMessages:
      type: object
      properties:
        content:
          type: string
          example: This message is recently updated!

    #For Messages
    MessagesForMessages:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              content:
                type: string
                example: "This content is new!"
              createdAt:
                type: string
                example: 2024-12-06
              userId:
                type: integer
                example: 1



    # Responses
    403Error:
      type: object
      properties:
        status:
          type: string
          example: error
        data:
          type: object
          properties:
            message:
              type: string
              example: "correct authorization is required"
